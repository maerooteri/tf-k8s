# #### KX Insights cluster deployment configuration - AWS #####
# This file can be customised as needed based on the environment requirements.

# AWS Credentials of the account used for the cluster and other components deployment
AWS_ACCESS_KEY_ID=""
AWS_SECRET_ACCESS_KEY=""
AWS_SESSION_TOKEN=""

# AWS region in which the infrastructure will be provisioned
TF_VAR_region="eu-west-1"

# S3 bucket name used to store terraform state files
BACKEND_BUCKET=""

# A prefix or identifier used for naming conventions. It helps distinguish resources and avoid naming conflicts in your infrastructure.
TF_VAR_prefix="project"

## ====================== Networking Configuration ======================

# The CIDR block for the Virtual Private Cloud (VPC) that will be created. This defines the IP address range for the entire VPC.
TF_VAR_vpc_cidr="10.0.0.0/16"

# A list of CIDR blocks for the private subnets within the VPC. These subnets will not have direct internet access and are typically used for resources that should not be exposed publicly.
TF_VAR_private_subnet_cidrs='["10.0.0.0/24","10.0.1.0/24","10.0.2.0/24","10.0.3.0/24"]'

#A list of CIDR blocks for the public subnets within the VPC. Public subnets are designed to have direct internet access, and they are commonly used for resources that need to be publicly accessible.
TF_VAR_public_subnet_cidrs='["10.0.4.0/24","10.0.5.0/24"]'

# A comma-separated list of Availability Zones in which the subnets and other resources will be created. Availability Zones provide high availability by distributing resources across multiple physical locations.
TF_VAR_availability_zones="eu-west-1a,eu-west-1b,eu-west-1c"

# A boolean flag indicating whether a single NAT gateway should be used for all private subnets. If set to `true`, a single NAT gateway is used. If set to `false`, each private subnet gets its own NAT gateway. Default value is false.
TF_VAR_single_nat_gateway=true

## ====================== BYON Configuration ======================
# Whether to use existing network to deploy infrastructure
TF_VAR_byon_enable=true

# VPC id of the existing vpc
TF_VAR_byon_vpc_id=""

# VPC cidr of the existing vpc
TF_VAR_byon_vpc_cidr=""

# public subnet ids in existing vpc, which will be used to deploy infrastructure components
TF_VAR_byon_public_subnet_ids='[""]'

# private subnet ids in existing vpc, which will be used to deploy infrastructure components.
TF_VAR_byon_private_subnet_ids='[""]'

## ====================== EKS cluster Configuration ======================

# The name of the EKS (Elastic Kubernetes Service) cluster that will be created. This is the logical grouping for the managed Kubernetes cluster. Max characters can be 12.
TF_VAR_cluster_name="rep-cluster"

# The EC2 instance type for the worker nodes in the EKS cluster. This determines the computing capacity of the nodes.
TF_VAR_cluster_nodes_instance_type="t3.large"

# The desired number of worker nodes in the EKS cluster. This is the initial number of nodes that will be provisioned.
TF_VAR_eks_desired_size=2

# The maximum number of worker nodes that the EKS cluster can scale up to based on demand.
TF_VAR_eks_max_size=6

# The minimum number of worker nodes that the EKS cluster should always maintain.
TF_VAR_eks_min_size=2

# The size (in gigabytes) of the block volume that will be attached to the worker nodes. This is used for storage purposes.
TF_VAR_block_volume_size=100

# The version of the Kubernetes cluster that will be created in the EKS cluster.
TF_VAR_eks_cluster_version="1.29"

# Volume type to be attached on EKS nodes
TF_VAR_volume_type="gp3"

## ====================== Bastion Host Configuration ======================
# The maximum number of instances for the bastion host. This defines the upper limit for scaling.
TF_VAR_bastion_max_instance_count=1

# The minimum number of instances for the bastion host. This ensures there is at least this number of instances running.
TF_VAR_bastion_min_instance_count=1

# The desired number of instances for the bastion host. This is the initial number of instances that will be provisioned.
TF_VAR_bastion_desired_instance_count=1

# The EC2 instance type for the bastion host. This determines the computing capacity of the bastion host.
TF_VAR_bastion_instance_type="t2.micro"

#Specifies the instance profile associated with a bastion host. The instance profile defines the permissions that the bastion host has.
TF_VAR_bastion_instance_profile="bastion_instance_profile"

# Specifies the role assigned to the bastion host. 
TF_VAR_bastion_role="bastion_role"

## ====================== Rook ceph ======================
# A boolean flag indicating whether Rook Ceph should be enabled (true) or not (false).
TF_VAR_enable_rook_ceph=true

# Minimum number of nodes for the Rook Ceph pool.
TF_VAR_rook_ceph_pool_min_node_count=1

# Maximum number of nodes for the Rook Ceph pool.
TF_VAR_rook_ceph_pool_max_node_count=1

# Desired number of nodes for the Rook Ceph pool.
TF_VAR_rook_ceph_pool_desired_node_count=1

# Specifies the EC2 instance type to be used for the Rook Ceph pool nodes.
TF_VAR_rook_ceph_pool_node_type="c5d.2xlarge"

## ====================== Cert manager ======================
# The URL of the Let's Encrypt server used for obtaining SSL/TLS certificates.
TF_VAR_letsencrypt_server="https://acme-v02.api.letsencrypt.org/directory"

# The email address associated with the Let's Encrypt account, used for certificate notifications.
TF_VAR_letsencrypt_email="user@gmail.com"

## ====================== Logging ======================
# A boolean flag indicating whether logging should be enabled (true) or not (false).
TF_VAR_enable_logging=true

## ====================== Cilium ======================
# A boolean flag indicating whether cilium should be enabled (true) or not (false).
TF_VAR_enable_cilium=true

## ====================== END ======================